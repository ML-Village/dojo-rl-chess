
// Generated by dojo-bindgen on Thu, 22 Aug 2024 20:40:38 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript` 
import { defineComponent, Type as RecsType, World } from "@dojoengine/recs";

export type ContractComponents = Awaited<ReturnType<typeof defineContractComponents>>;



// Type definition for `dojo::model::layout::Layout` enum
export type Layout = { type: 'Fixed'; value: RecsType.NumberArray; } | { type: 'Struct'; value: RecsType.StringArray; } | { type: 'Tuple'; value: RecsType.StringArray; } | { type: 'Array'; value: RecsType.StringArray; } | { type: 'ByteArray'; } | { type: 'Enum'; value: RecsType.StringArray; };

export const LayoutDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `rl_chess_contracts::models::players::ProfilePicType` enum
export type ProfilePicType = { type: 'Undefined'; } | { type: 'Native'; } | { type: 'External'; };

export const ProfilePicTypeDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `dojo::model::layout::FieldLayout` struct
export interface FieldLayout {
    selector: BigInt;
    layout: Layout;
    
}
export const FieldLayoutDefinition = {
    selector: RecsType.BigInt,
    layout: LayoutDefinition,
    
};

// Type definition for `core::byte_array::ByteArray` struct
export interface ByteArray {
    data: String[];
    pending_word: BigInt;
    pending_word_len: Number;
    
}
export const ByteArrayDefinition = {
    data: RecsType.StringArray,
    pending_word: RecsType.BigInt,
    pending_word_len: RecsType.Number,
    
};

// Type definition for `rl_chess_contracts::models::players::Player` struct
export interface Player {
    address: BigInt;
    name: BigInt;
    profile_pic_type: ProfilePicType;
    profile_pic_uri: String;
    timestamp: Number;
    
}
export const PlayerDefinition = {
    address: RecsType.BigInt,
    name: RecsType.BigInt,
    profile_pic_type: ProfilePicTypeDefinition,
    profile_pic_uri: RecsType.String,
    timestamp: RecsType.Number,
    
};


// Type definition for `rl_chess_contracts::models::games::Color` enum
export type Color = { type: 'None'; } | { type: 'White'; } | { type: 'Black'; };

export const ColorDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `rl_chess_contracts::models::games::GameState` struct
export interface GameState {
    game_id: BigInt;
    white: Number;
    turn: Number;
    turn_color: Color;
    w_turn_expiry_time: Number;
    b_turn_expiry_time: Number;
    w_total_time_left: Number;
    b_total_time_left: Number;
    game_start: Number;
    last_move_time: Number;
    game_end: Number;
    whitekingside: Boolean;
    whitequeenside: Boolean;
    blackkingside: Boolean;
    blackqueenside: Boolean;
    halfmove_clock: Number;
    en_passant_target_x: Number;
    en_passant_target_y: Number;
    
}
export const GameStateDefinition = {
    game_id: RecsType.BigInt,
    white: RecsType.Number,
    turn: RecsType.Number,
    turn_color: ColorDefinition,
    w_turn_expiry_time: RecsType.Number,
    b_turn_expiry_time: RecsType.Number,
    w_total_time_left: RecsType.Number,
    b_total_time_left: RecsType.Number,
    game_start: RecsType.Number,
    last_move_time: RecsType.Number,
    game_end: RecsType.Number,
    whitekingside: RecsType.Boolean,
    whitequeenside: RecsType.Boolean,
    blackkingside: RecsType.Boolean,
    blackqueenside: RecsType.Boolean,
    halfmove_clock: RecsType.Number,
    en_passant_target_x: RecsType.Number,
    en_passant_target_y: RecsType.Number,
    
};


// Type definition for `rl_chess_contracts::models::games::InviteState` enum
export type InviteState = { type: 'Null'; } | { type: 'Awaiting'; } | { type: 'Withdrawn'; } | { type: 'Refused'; } | { type: 'Expired'; } | { type: 'InProgress'; } | { type: 'Resolved'; } | { type: 'Draw'; };

export const InviteStateDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `rl_chess_contracts::models::games::Game` struct
export interface Game {
    game_id: BigInt;
    game_format_id: Number;
    room_owner_address: BigInt;
    invitee_address: BigInt;
    invite_state: InviteState;
    invite_expiry: Number;
    result: Number;
    winner: BigInt;
    room_start: Number;
    room_end: Number;
    
}
export const GameDefinition = {
    game_id: RecsType.BigInt,
    game_format_id: RecsType.Number,
    room_owner_address: RecsType.BigInt,
    invitee_address: RecsType.BigInt,
    invite_state: InviteStateDefinition,
    invite_expiry: RecsType.Number,
    result: RecsType.Number,
    winner: RecsType.BigInt,
    room_start: RecsType.Number,
    room_end: RecsType.Number,
    
};


// Type definition for `rl_chess_contracts::models::games::GameFormat` struct
export interface GameFormat {
    game_format_id: Number;
    description: BigInt;
    turn_expiry: Number;
    total_time_per_side: Number;
    total_time_string: BigInt;
    increment: Number;
    
}
export const GameFormatDefinition = {
    game_format_id: RecsType.Number,
    description: RecsType.BigInt,
    turn_expiry: RecsType.Number,
    total_time_per_side: RecsType.Number,
    total_time_string: RecsType.BigInt,
    increment: RecsType.Number,
    
};


// Type definition for `rl_chess_contracts::models::games::PieceType` enum
export type PieceType = { type: 'None'; } | { type: 'Pawn'; } | { type: 'Knight'; } | { type: 'Bishop'; } | { type: 'Rook'; } | { type: 'Queen'; } | { type: 'King'; };

export const PieceTypeDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `rl_chess_contracts::models::games::Piece` struct
export interface Piece {
    color: Color;
    piece_type: PieceType;
    
}
export const PieceDefinition = {
    color: ColorDefinition,
    piece_type: PieceTypeDefinition,
    
};

// Type definition for `rl_chess_contracts::models::games::GameSquares` struct
export interface GameSquares {
    game_id: BigInt;
    x: Number;
    y: Number;
    piece: Piece;
    
}
export const GameSquaresDefinition = {
    game_id: RecsType.BigInt,
    x: RecsType.Number,
    y: RecsType.Number,
    piece: PieceDefinition,
    
};


export function defineContractComponents(world: World) {
    return {

        // Model definition for `rl_chess_contracts::models::players::Player` model
        Player: (() => {
            return defineComponent(
                world,
                {
                    address: RecsType.BigInt,
                    name: RecsType.BigInt,
                    profile_pic_type: RecsType.String,
                    profile_pic_uri: RecsType.StringDefinition,
                    timestamp: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "rl_chess_contracts",
                        name: "Player",
                        types: ["ContractAddress", "felt252", "ProfilePicType", "u64"],
                        customTypes: ["ByteArray"],
                    },
                }
            );
        })(),

        // Model definition for `rl_chess_contracts::models::games::GameState` model
        GameState: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.BigInt,
                    white: RecsType.Number,
                    turn: RecsType.Number,
                    turn_color: RecsType.String,
                    w_turn_expiry_time: RecsType.Number,
                    b_turn_expiry_time: RecsType.Number,
                    w_total_time_left: RecsType.Number,
                    b_total_time_left: RecsType.Number,
                    game_start: RecsType.Number,
                    last_move_time: RecsType.Number,
                    game_end: RecsType.Number,
                    whitekingside: RecsType.Boolean,
                    whitequeenside: RecsType.Boolean,
                    blackkingside: RecsType.Boolean,
                    blackqueenside: RecsType.Boolean,
                    halfmove_clock: RecsType.Number,
                    en_passant_target_x: RecsType.Number,
                    en_passant_target_y: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "rl_chess_contracts",
                        name: "GameState",
                        types: ["u128", "u8", "u32", "Color", "u64", "u64", "u64", "u64", "u64", "u64", "u64", "bool", "bool", "bool", "bool", "u16", "u8", "u8"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `rl_chess_contracts::models::games::Game` model
        Game: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.BigInt,
                    game_format_id: RecsType.Number,
                    room_owner_address: RecsType.BigInt,
                    invitee_address: RecsType.BigInt,
                    invite_state: RecsType.String,
                    invite_expiry: RecsType.Number,
                    result: RecsType.Number,
                    winner: RecsType.BigInt,
                    room_start: RecsType.Number,
                    room_end: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "rl_chess_contracts",
                        name: "Game",
                        types: ["u128", "u16", "ContractAddress", "ContractAddress", "InviteState", "u64", "u8", "ContractAddress", "u64", "u64"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `rl_chess_contracts::models::games::GameFormat` model
        GameFormat: (() => {
            return defineComponent(
                world,
                {
                    game_format_id: RecsType.Number,
                    description: RecsType.BigInt,
                    turn_expiry: RecsType.Number,
                    total_time_per_side: RecsType.Number,
                    total_time_string: RecsType.BigInt,
                    increment: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "rl_chess_contracts",
                        name: "GameFormat",
                        types: ["u16", "felt252", "u64", "u64", "felt252", "u8"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `rl_chess_contracts::models::games::GameSquares` model
        GameSquares: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.BigInt,
                    x: RecsType.Number,
                    y: RecsType.Number,
                    piece: PieceDefinition,
                },
                {
                    metadata: {
                        namespace: "rl_chess_contracts",
                        name: "GameSquares",
                        types: ["u128", "u8", "u8"],
                        customTypes: ["Piece"],
                    },
                }
            );
        })(),
    };
}
