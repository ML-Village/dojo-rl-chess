
// Generated by dojo-bindgen on Thu, 22 Aug 2024 20:40:38 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript` 
import { Account, byteArray } from "starknet";
import { DojoProvider } from "@dojoengine/core";
import * as models from "./models.gen";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export async function setupWorld(provider: DojoProvider) {
    // System definitions for `rl_chess_contracts-lobby` contract
    function lobby() {
        const contract_name = "lobby";

        
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "rl_chess_contracts"
                );
            } catch (error) {
                console.error("Error executing World Call:", error);
                throw error;
            }
        };
            

    
        // Call the `register_player` system with the specified Account and calldata
        const register_player = async (props: { account: Account, name: bigint, profile_pic_type: models.ProfilePicType, profile_pic_uri: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "register_player",
                        calldata: [props.name,
                ["Undefined", "Native", "External"].indexOf(props.profile_pic_type.type),
                props.profile_pic_uri],
                    },
                    "rl_chess_contracts"
                );
            } catch (error) {
                console.error("Error executing register_player:", error);
                throw error;
            }
        };
            

    
        // Call the `update_player` system with the specified Account and calldata
        const update_player = async (props: { account: Account, name: bigint, profile_pic_type: models.ProfilePicType, profile_pic_uri: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "update_player",
                        calldata: [props.name,
                ["Undefined", "Native", "External"].indexOf(props.profile_pic_type.type),
                props.profile_pic_uri],
                    },
                    "rl_chess_contracts"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `invite` system with the specified Account and calldata
        const invite = async (props: { account: Account, game_format_id: number, invitee_address: bigint, invite_expiry: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "invite",
                        calldata: [props.game_format_id,
                props.invitee_address,
                props.invite_expiry],
                    },
                    "rl_chess_contracts"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `reply_invite` system with the specified Account and calldata
        const reply_invite = async (props: { account: Account, game_id: bigint, accepted: boolean }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "reply_invite",
                        calldata: [props.game_id,
                props.accepted],
                    },
                    "rl_chess_contracts"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `create_game` system with the specified Account and calldata
        const create_game = async (props: { account: Account, game_format_id: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "create_game",
                        calldata: [props.game_format_id],
                    },
                    "rl_chess_contracts"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `join_game` system with the specified Account and calldata
        const join_game = async (props: { account: Account, game_id: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "join_game",
                        calldata: [props.game_id],
                    },
                    "rl_chess_contracts"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

        return {
            world, register_player, update_player, invite, reply_invite, create_game, join_game
        };
    }

    // System definitions for `rl_chess_contracts-admin` contract
    function admin() {
        const contract_name = "admin";

        
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "rl_chess_contracts"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

        return {
            world
        };
    }

    // System definitions for `rl_chess_contracts-gameroom` contract
    function gameroom() {
        const contract_name = "gameroom";

        
        // Call the `start_game` system with the specified Account and calldata
        const start_game = async (props: { account: Account, game_id: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "start_game",
                        calldata: [props.game_id],
                    },
                    "rl_chess_contracts"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `make_move` system with the specified Account and calldata
        const make_move = async (props: { account: Account, game_id: bigint, from_x: number, from_y: number, to_x: number, to_y: number, promotion_choice: models.Piece }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "make_move",
                        calldata: [props.game_id,
                props.from_x,
                props.from_y,
                props.to_x,
                props.to_y,
                props.promotion_choice.color,
                    props.promotion_choice.piece_type],
                    },
                    "rl_chess_contracts"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `is_valid_move` system with the specified Account and calldata
        const is_valid_move = async (props: { account: Account, game_id: bigint, from_x: number, from_y: number, to_x: number, to_y: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "is_valid_move",
                        calldata: [props.game_id,
                props.from_x,
                props.from_y,
                props.to_x,
                props.to_y],
                    },
                    "rl_chess_contracts"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "rl_chess_contracts"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

        return {
            start_game, make_move, is_valid_move, world
        };
    }

    return {
        lobby: lobby(),
        admin: admin(),
        gameroom: gameroom()
    };
}
