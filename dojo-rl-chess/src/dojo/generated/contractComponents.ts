/*
 * Autogenerated file. Do not edit manually.
 * Generated using @dojoengine/core
 * Command: npx @dojoengine/core <MANIFEST_LOCATION> <OUTPUT_PATH> <RPC_URL> <WORLD_ADDRESS>
 */

import { defineComponent, Type as RecsType, World } from "@dojoengine/recs";
import { profile } from "console";

export type ContractComponents = Awaited<
    ReturnType<typeof defineContractComponents>
>;

export function defineContractComponents(world: World) {
    return {
        
        Game: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.BigInt,
                    game_format_id: RecsType.Number,
                    room_owner_address: RecsType.BigInt,
                    invitee_address: RecsType.BigInt,
                    invite_state: RecsType.String,
                    invite_expiry: RecsType.Number,
                    result: RecsType.Number,
                    winner: RecsType.BigInt,
                    room_start: RecsType.Number,
                    room_end: RecsType.Number,
                },
                {
                    metadata: {
                        name: "rl_chess_contracts-Game",
                        types: ["u128", "u16", "contractaddress", "contractaddress",
                            "enum", "u64", "u8", "contractaddress", "u64", "u64"
                        ],
                        customTypes: ["InviteState"],
                    },
                }
            );
        })(),

        GameFormat: (() => {
            return defineComponent(
                world,
                {
                    game_format_id: RecsType.Number,
                    description: RecsType.String,
                    turn_expiry:RecsType.Number,
                    total_time_per_side: RecsType.Number,
                    total_time_string: RecsType.String,
                    increment: RecsType.Number,
                },
                {
                    metadata: {
                        name: "rl_chess_contracts-GameFormat",
                        types: ["u16", "felt252", "u64", "u64",
                            "felt252", "u8"
                        ],
                        customTypes: [],
                    },
                }
            );
        })(),

        GameState: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.BigInt,
                    white:RecsType.Number,
                    turn: RecsType.Number,
                    turn_color: RecsType.String,

                    w_turn_expiry_time: RecsType.Number,
                    b_turn_expiry_time: RecsType.Number,
                    w_total_time_left: RecsType.Number, // Unix time, total game time (0 for unlimited)
                    b_total_time_left: RecsType.Number, // Unix time, total game time (0 for unlimited)
                    
                    game_start: RecsType.Number, // Unix time, started
                    last_move_time: RecsType.Number,
                    game_end: RecsType.Number, // Unix time, ended

                    // castling rights
                    whitekingside: RecsType.Boolean,
                    whitequeenside: RecsType.Boolean,
                    blackkingside: RecsType.Boolean,
                    blackqueenside: RecsType.Boolean,

                    // move tracker
                    halfmove_clock: RecsType.Number,
                    en_passant_target_x: RecsType.Number,
                    en_passant_target_y: RecsType.Number,
                    // fullmove_number: RecsType.Number,

                },
                {
                    metadata: {
                        name: "rl_chess_contracts-GameState",
                        types: ["u128", "u8", "u32", "enum",
                            "u64", "u64", "u64", "u64",
                            "u64", "u64", "u64",
                            "bool", "bool", "bool", "bool",
                            "u16", "u8", "u8",
                        ],
                        customTypes: ["Color"],
                    },
                }
            );
        })(),

        GameSquares: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.BigInt,
                    x: RecsType.Number,
                    y: RecsType.Number,
                    piece: { color: RecsType.String, piece_type: RecsType.String },
                },
                {
                    metadata: {
                        name: "rl_chess_contracts-GameSquares",
                        types: ["u128", "u8", "u8", "enum", "enum"],
                        customTypes: ["Piece"],
                    },
                }
            );
        })(),

        Player: (() => {
            return defineComponent(
                world,
                {
                    address: RecsType.BigInt,
                    name: RecsType.BigInt,
                    profile_pic_type: RecsType.String,
                    profile_pic_uri: RecsType.String,
                    timestamp: RecsType.Number,
                },
                {
                    metadata: {
                        name: "rl_chess_contracts-Player",
                        types: ["contractaddress", "felt252", "enum", "bytearray", "u64"],
                        customTypes: ["ProfilePicType"],
                    },
                }
            );
        })(),
    };
}
